/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
// This is needed for mousing
#include <dt-bindings/zmk/pointing.h>

#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500

// We define our layers
#define DEFAULT 0
// Almost like numpad, the idea is I expose numbers and arrow keys here?
#define NUMPAD 1
// The idea here is we expose symbols I can use within VIM?
#define SYMBOLS 2
// The idea here is we need something for F keys and special num keys
#define SPECIAL 3
// The idea here is to allow me to change settings like BT, display, RGB etc
#define SETTINGS 4
// The idea here is we need a mouse layer for true keyboard only
#define MOUSE 5
// We define a simple gaming layer here
#define GAMING 6

&led_strip {
    // Defines my RGB chain length
    chain-length = <31>;
};

&lt {
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>;
};

&nice_view_spi { cs-gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
    mouse_emulation: mouse_emulation {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        };

    td0: td0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TD0";
      #binding-cells = <0>;
      bindings = <&kp ESCAPE>, <&kp TAB>;

      tapping-term-ms = <250>;
  };

  td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&lm 1 LEFT_ALT>, <&sk LSHIFT>, <&caps_word>;
        };

  td2: td2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD2";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&kp LEFT_SHIFT>, <&kp ENTER>;
        };

  ld1: ld1 {
      compatible = "zmk,behavior-tap-dance";
      label = "LD1";
      #binding-cells = <0>;
      bindings = <&sl NUMPAD>, <&mo NUMPAD>;

      tapping-term-ms = <250>;
  };

  ld2: ld2 {
      compatible = "zmk,behavior-tap-dance";
      label = "LD2";
      #binding-cells = <0>;
      bindings = <&sl SYMBOLS>, <&mo SYMBOLS>;

      tapping-term-ms = <250>;
  };


    };

    /**
    * Temporarily switches to a layer (`&mo`) while a modifier is held.
    * Analogous to QMK's `LM()`, using a parameterized macro.
    *
    * Params:
    *  1. Layer to switch to
    *  2. Modifier to press while layer is active
    *
    * Example:
    *  `&lm NUM_LAYER LSHIFT`
    */

    lm: lm {
      compatible = "zmk,behavior-macro-two-param";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <2>;
      bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_param_2to1>
        , <&macro_press &kp MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_2to1>
        , <&macro_release &kp MACRO_PLACEHOLDER>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&td0            &kp Q  &kp W  &kp E             &kp R    &kp T                                                              &kp Y  &kp U      &kp I                      &kp O    &kp P     &kp BACKSPACE
&kp LEFT_SHIFT  &kp A  &kp S  &kp D             &kp F    &kp G                                                              &kp H  &kp J      &kp K                      &kp L    &kp SEMI  &kp SQT
&kp TAB       &kp Z  &kp X  &kp C             &kp V    &kp B         &tog SYMBOLS    &tog NUMPAD  &to GAMING           &to SPECIAL  &kp N  &kp M      &kp COMMA                  &kp DOT  &kp FSLH  &kp RCTRL
                              &lt MOUSE C_MUTE &td1  &kp SPACE  &kp ENTER &kp LCTRL   &td2  &ld1 &ld2 &kp UNDERSCORE  &lt SETTINGS C_PLAY_PAUSE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numpad_layer {
            bindings = <
&kp Q  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                  &kp N6    &kp N7    &kp N8        &kp N9     &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };

symbols_layer {
            bindings = <
&trans         &trans  &trans  &kp GRAVE  &kp LEFT_BRACE        &kp RIGHT_BRACE                                        &kp LESS_THAN  &kp GREATER_THAN  &kp DOLLAR    &trans          &kp PIPE  &trans
&kp AMPERSAND  &trans  &trans  &trans     &kp LBKT              &kp RBKT                                               &kp EQUAL      &kp EXCLAMATION   &kp ASTERISK  &kp UNDERSCORE  &trans    &trans
&trans         &trans  &trans  &kp CARET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans  &trans  &kp MINUS         &kp PLUS          &trans        &trans          &trans    &trans
                               &trans     &trans                &trans                 &trans  &trans  &trans  &trans  &trans         &trans            &trans
            >;
        };

        special_layer {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3   &kp F4   &kp F5                                     &kp F6   &kp F7   &kp F8   &kp F9      &kp F10   &trans
&trans  &trans  &trans  &kp F11  &kp F12  &kp F13                                    &kp F14  &kp F15  &kp F16  &kp INSERT  &kp HOME  &kp PAGE_UP
&trans  &trans  &trans  &kp F17  &kp F18  &kp F19  &kp F20  &kp F21  &trans  &trans  &kp F22  &kp F23  &kp F24  &kp DELETE  &kp END   &kp PAGE_DOWN
                        &trans   &trans   &trans   &trans   &trans   &trans  &trans  &trans   &to DEFAULT   &trans
            >;
        };

        settings_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR                                                                          &trans  &trans  &trans  &trans  &trans  &trans
&sys_reset        &trans        &trans        &trans        &trans        &bt BT_CLR_ALL                                                                              &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &out OUT_BLE        &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_TOG                   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &out OUT_TOG        &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_COLOR_HSB(296,78,25)  &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                         &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                         &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2  &mkp MCLK  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
                        &trans  &trans  &trans  &trans  &mkp MB4  &mkp MB5  &trans     &trans          &trans          &trans
            >;

            sensor-bindings = <&mouse_emulation>;
        };

        gaming_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E   &kp R   &kp T                                     &kp N1    &kp N2  &kp N3  &kp N4  &kp N5  &kp N6
&kp LSHFT  &kp A  &kp S  &kp D   &kp F   &kp G                                     &trans    &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp X  &kp C   &kp V   &kp B     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &kp LGUI  &trans  &trans  &mo NUMPAD  &trans  &kp RGUI  &to DEFAULT &trans
            >;
        };
    };
};


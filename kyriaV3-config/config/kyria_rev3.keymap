/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
// This is needed for mousing
#include <dt-bindings/zmk/pointing.h>

#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#define ZMK_POINTING_DEFAULT_MOVE_VAL 3000

// We define our layers
#define DEFAULT 0
// Almost like numpad, the idea is I expose numbers and arrow keys here?
#define NUMPAD 1
// The idea here is we expose symbols I can use within VIM?
#define SYMBOLS 2
// The idea here is we need something for F keys and special num keys
#define SPECIAL 3
// The idea here is to allow me to change settings like BT, display, RGB etc
#define SETTINGS 4
// The idea here is we need a mouse layer for true keyboard only
#define MOUSE 5
// We define a simple gaming layer here
#define GAMING 6
// We need extra behavior, so add a map for arrows and numbers
#define AGAMING 7

&led_strip {
    // Defines my RGB chain length
    chain-length = <31>;
};

&lt {
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    // We allow a half of max speed time for down press,
    // we can play around with this parameter
    time-to-max-speed-ms = <80>;
    // We move at a uniform acceleration
    acceleration-exponent = <1>;
};

&nice_view_spi { cs-gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>; };

/ {
behaviors {

  lh_tog: behavior_layer_hold_toggle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&tog>, <&kp>;
        };

  mouse_up_down: mouse_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            tap-ms = <40>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_DOWN>;
        };

  mouse_left_right: mouse_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            tap-ms = <40>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_RIGHT>;
        };

  escape_delete_dance: escape_delete_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "escape_delete_dance";
      #binding-cells = <0>;
      bindings = <&kp ESCAPE>, <&kp DELETE>;

      tapping-term-ms = <450>;
  };

  alt_dance: alt_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "alt_dance";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&lm 1 LEFT_ALT>, <&sk LSHIFT>, <&caps_word>;
        };

  td2: td2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD2";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&kp LEFT_SHIFT>, <&kp ENTER>;
        };

  ctrl_dance: ctrl_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ctrl_dance";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&kp LCTRL>, <&lm 1 LEFT_ALT>;
        };

  shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "shift_dance";
            #binding-cells = <0>;
            tapping-term-ms = <450>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };

  numpad_layer_dance: numpad_layer_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "numpad_layer_dance";
      #binding-cells = <0>;
      bindings = <&sl NUMPAD>, <&mo NUMPAD>;

      tapping-term-ms = <250>;
  };

  symbols_layer_dance: symbols_layer_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "symbols_layer_dance";
      #binding-cells = <0>;
      bindings = <&sl SYMBOLS>, <&mo SYMBOLS>;

      tapping-term-ms = <250>;
  };


    };

    /**
    * Temporarily switches to a layer (`&mo`) while a modifier is held.
    * Analogous to QMK's `LM()`, using a parameterized macro.
    *
    * Params:
    *  1. Layer to switch to
    *  2. Modifier to press while layer is active
    *
    * Example:
    *  `&lm NUM_LAYER LSHIFT`
    */

    lm: lm {
      compatible = "zmk,behavior-macro-two-param";
      wait-ms = <0>;
      tap-ms = <0>;
      #binding-cells = <2>;
      bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_param_2to1>
        , <&macro_press &kp MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_param_2to1>
        , <&macro_release &kp MACRO_PLACEHOLDER>
        , <&macro_param_1to1>
        , <&macro_release &mo MACRO_PLACEHOLDER>
        ;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
              &escape_delete_dance  &kp Q  &kp W  &kp E             &kp R    &kp T                                                              &kp Y  &kp U      &kp I                      &kp O    &kp P     &kp BACKSPACE
              &kp LEFT_SHIFT  &kp A  &kp S  &kp D             &kp F    &kp G                                                              &kp H  &kp J      &kp K                      &kp L    &kp SEMI  &kp SQT
              &kp PIPE       &kp Z  &kp X  &kp C             &kp V    &kp B         &kp TAB    &kp LS(LCTRL)   &tog SPECIAL           &tog MOUSE  &kp N  &kp M      &kp COMMA                  &kp DOT  &kp FSLH  &kp MINUS
                              &lh_tog GAMING C_MUTE &alt_dance &numpad_layer_dance &kp SPACE  &ctrl_dance  &shift_dance &kp ENTER &symbols_layer_dance &kp UNDERSCORE  &lt SETTINGS C_PLAY_PAUSE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numpad_layer {
            display-name = "NUMPAD";
            bindings = <
              &kp Q  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                  &kp N6    &kp N7    &kp N8        &kp N9     &kp N0  &trans
              &trans  &trans  &trans  &trans  &trans  &kp T                                  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp P  &trans
              &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };

        symbols_layer {
            display-name = "SYMBOLS";
            bindings = <
              &trans         &trans  &trans  &kp LEFT_BRACE &kp RIGHT_BRACE &kp HASH                                        &kp LESS_THAN  &kp GREATER_THAN  &kp DOLLAR    &kp AT_SIGN          &kp PIPE  &trans
              &trans  &kp AMPERSAND  &kp GRAVE  &kp LBKT &kp RBKT &kp BACKSLASH                                               &kp EQUAL      &kp EXCLAMATION   &kp ASTERISK  &kp UNDERSCORE  &trans    &trans
              &trans         &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS &kp CARET  &trans  &trans  &trans  &trans  &kp MINUS         &kp PLUS          &trans        &trans          &trans    &trans
                               &trans     &trans                &trans                 &trans  &trans  &trans  &trans  &trans         &trans            &trans
            >;
        };

        special_layer {
            display-name = "SPECIAL";
            bindings = <
              &trans  &kp F1  &kp F2  &kp F3   &kp F4   &kp F5                                     &kp F6   &kp F7   &kp F8   &kp F9      &kp F10   &trans
              &trans  &trans  &trans  &kp F11  &kp F12  &kp F13                                    &kp F14  &kp F15  &kp F16  &kp INSERT  &kp HOME  &kp PAGE_UP
              &trans  &trans  &trans  &kp F17  &kp F18  &kp F19  &kp F20  &kp F21  &trans  &trans  &kp F22  &kp F23  &kp F24  &kp DELETE  &kp END   &kp PAGE_DOWN
                        &trans   &trans   &trans   &trans   &trans   &trans  &trans  &trans   &to DEFAULT   &trans
            >;
        };

        settings_layer {
            display-name = "SETTINGS";
            bindings = <
              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR                                                                          &trans  &trans  &trans  &trans  &trans  &trans
              &sys_reset        &trans        &trans        &trans        &trans        &bt BT_CLR_ALL                                                                              &trans  &trans  &trans  &trans  &trans  &trans
              &trans        &trans        &trans        &trans        &out OUT_BLE        &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_TOG                   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &out OUT_TOG        &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_COLOR_HSB(296,78,25)  &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
              &trans  &trans  &trans  &trans  &trans  &trans                                         &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
              &trans  &trans  &trans  &trans  &trans  &trans                                         &mkp MCLK  &mkp MB1  &mkp MB2  &mmv MOVE_RIGHT  &trans  &trans
              &trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans  &mkp MB4  &mkp MB5  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &mkp MB4  &mkp MB5  &trans     &trans          &trans          &to DEFAULT
            >;

            sensor-bindings = <&mouse_left_right>, <&mouse_up_down>;
        };

        gaming_layer {
            display-name = "GAMING";
            bindings = <
              &kp ESCAPE    &kp Q &kp T  &kp R  &kp E   &kp F                                        &trans    &trans  &trans  &trans  &trans  &trans
              &kp LSHFT  &kp A &kp S  &kp W  &kp D   &kp G                                     &trans    &trans  &trans  &trans  &trans  &trans
              &kp LCTRL  &kp Z &kp X  &kp C  &kp V   &kp B        &trans  &kp TAB  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                         &trans  &kp GUI  &mo AGAMING  &kp LEFT_ALT  &kp SPACE  &trans  &trans  &trans  &trans &to DEFAULT
            >;
        };

      gaming_layer_alt {
            display-name = "AGAMING";
            bindings = <
              &kp N1 &kp N2  &kp N3  &kp N4   &kp N5 &kp N6                                        &trans    &trans  &trans  &trans  &trans  &trans
              &kp N8  &kp LEFT &kp DOWN  &kp UP_ARROW  &kp RIGHT   &kp N7                                     &trans    &trans  &trans  &trans  &trans  &trans
              &kp N9 &kp Z &kp X  &kp C  &kp V   &kp B        &trans  &kp TAB  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                         &lh_tog DEFAULT C_MUTE  &kp GUI  &trans  &kp LEFT_ALT  &kp SPACE  &trans  &trans  &trans  &trans &to DEFAULT
            >;
        };
    };
};

